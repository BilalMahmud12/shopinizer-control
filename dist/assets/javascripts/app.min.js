Vue.component('treeselect', VueTreeselect.Treeselect)

new Vue({
    el: '#app',
    data: {
        // treeselect dump
        treeselect_value: null,
        treeselect_options: [ {
            id: 'a',
            label: 'a',
            children: [ {
            id: 'aa',
            label: 'aa',
            }, {
            id: 'ab',
            label: 'ab',
            } ],
        }, {
            id: 'b',
            label: 'b',
        }, {
            id: 'c',
            label: 'c',
        } ],
    },
});

Dropzone.autoDiscover = false;

$(document).ready(function() {
    // Tippy
    tippy('[data-tippy-content]', {
        placement: 'right'
    });

    // Records tables
    var mainTable = $('#records-table').DataTable({
        columnDefs: [
            {
                "targets": 'no-sort',
                "orderable": false,
            },
            {
                targets: 0,
                data: "select",
                searchable: false,
                orderable: false,
                className: 'select-checkbox',
                width: "4%"
            }
        ],
        responsive: true,
        select: {
            style: 'multi',
            selector: 'td:first-child'
        },
        order: [[ 1, 'asc' ]]
    });

    $('.select-checkbox').on('click', function() {
        $(this).find('.select-row').prop("checked", !$(this).find('.select-row').prop("checked"));
    });

    $('.select-all').click(function() {
        var all = mainTable.rows({ search: 'applied' }).count();
        var selectedRows = mainTable.rows({ selected: true, search: 'applied' }).count();

        if (selectedRows < all) {
            mainTable.rows({ search: 'applied' }).deselect();
            mainTable.rows({ search: 'applied' }).select();
            $(this).find('input').prop("checked", true);
            $('#records-table').find('.select-row').prop("checked", true);
        } else {
            mainTable.rows({ search: 'applied' }).deselect();
            $(this).find('input').prop("checked", false);
            $('#records-table').find('.select-row').prop("checked", false);
        }
    });

    // Quill editor
    new Quill('#editor', {
        theme: 'snow'
    });

    // Select2
    $(".select2-df").select2({});

    // Upload images
    $("#upload-widget").dropzone({
        url: "/upload",
        dictDefaultMessage: "Drag & Drop images here to upload.",
        uploadMultiple: true,
        capture: true,
    });

    // Variations repeater
    $('.variations-repeater').repeater({
        repeaters: [{
            selector: '.variation-values-repeater'
        }]
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlZ1ZS5jb21wb25lbnQoJ3RyZWVzZWxlY3QnLCBWdWVUcmVlc2VsZWN0LlRyZWVzZWxlY3QpXHJcblxyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI2FwcCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgLy8gdHJlZXNlbGVjdCBkdW1wXHJcbiAgICAgICAgdHJlZXNlbGVjdF92YWx1ZTogbnVsbCxcclxuICAgICAgICB0cmVlc2VsZWN0X29wdGlvbnM6IFsge1xyXG4gICAgICAgICAgICBpZDogJ2EnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2EnLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogWyB7XHJcbiAgICAgICAgICAgIGlkOiAnYWEnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2FhJyxcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJ2FiJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdhYicsXHJcbiAgICAgICAgICAgIH0gXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGlkOiAnYicsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnYicsXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJ2MnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2MnLFxyXG4gICAgICAgIH0gXSxcclxuICAgIH0sXHJcbn0pO1xyXG5cclxuRHJvcHpvbmUuYXV0b0Rpc2NvdmVyID0gZmFsc2U7XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgIC8vIFRpcHB5XHJcbiAgICB0aXBweSgnW2RhdGEtdGlwcHktY29udGVudF0nLCB7XHJcbiAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZWNvcmRzIHRhYmxlc1xyXG4gICAgdmFyIG1haW5UYWJsZSA9ICQoJyNyZWNvcmRzLXRhYmxlJykuRGF0YVRhYmxlKHtcclxuICAgICAgICBjb2x1bW5EZWZzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwidGFyZ2V0c1wiOiAnbm8tc29ydCcsXHJcbiAgICAgICAgICAgICAgICBcIm9yZGVyYWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0czogMCxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFwic2VsZWN0XCIsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3QtY2hlY2tib3gnLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNCVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxyXG4gICAgICAgIHNlbGVjdDoge1xyXG4gICAgICAgICAgICBzdHlsZTogJ211bHRpJyxcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICd0ZDpmaXJzdC1jaGlsZCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9yZGVyOiBbWyAxLCAnYXNjJyBdXVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLnNlbGVjdC1jaGVja2JveCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQodGhpcykuZmluZCgnLnNlbGVjdC1yb3cnKS5wcm9wKFwiY2hlY2tlZFwiLCAhJCh0aGlzKS5maW5kKCcuc2VsZWN0LXJvdycpLnByb3AoXCJjaGVja2VkXCIpKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJy5zZWxlY3QtYWxsJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGFsbCA9IG1haW5UYWJsZS5yb3dzKHsgc2VhcmNoOiAnYXBwbGllZCcgfSkuY291bnQoKTtcclxuICAgICAgICB2YXIgc2VsZWN0ZWRSb3dzID0gbWFpblRhYmxlLnJvd3MoeyBzZWxlY3RlZDogdHJ1ZSwgc2VhcmNoOiAnYXBwbGllZCcgfSkuY291bnQoKTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkUm93cyA8IGFsbCkge1xyXG4gICAgICAgICAgICBtYWluVGFibGUucm93cyh7IHNlYXJjaDogJ2FwcGxpZWQnIH0pLmRlc2VsZWN0KCk7XHJcbiAgICAgICAgICAgIG1haW5UYWJsZS5yb3dzKHsgc2VhcmNoOiAnYXBwbGllZCcgfSkuc2VsZWN0KCk7XHJcbiAgICAgICAgICAgICQodGhpcykuZmluZCgnaW5wdXQnKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgJCgnI3JlY29yZHMtdGFibGUnKS5maW5kKCcuc2VsZWN0LXJvdycpLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1haW5UYWJsZS5yb3dzKHsgc2VhcmNoOiAnYXBwbGllZCcgfSkuZGVzZWxlY3QoKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdpbnB1dCcpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgJCgnI3JlY29yZHMtdGFibGUnKS5maW5kKCcuc2VsZWN0LXJvdycpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBRdWlsbCBlZGl0b3JcclxuICAgIG5ldyBRdWlsbCgnI2VkaXRvcicsIHtcclxuICAgICAgICB0aGVtZTogJ3Nub3cnXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTZWxlY3QyXHJcbiAgICAkKFwiLnNlbGVjdDItZGZcIikuc2VsZWN0Mih7fSk7XHJcblxyXG4gICAgLy8gVXBsb2FkIGltYWdlc1xyXG4gICAgJChcIiN1cGxvYWQtd2lkZ2V0XCIpLmRyb3B6b25lKHtcclxuICAgICAgICB1cmw6IFwiL3VwbG9hZFwiLFxyXG4gICAgICAgIGRpY3REZWZhdWx0TWVzc2FnZTogXCJEcmFnICYgRHJvcCBpbWFnZXMgaGVyZSB0byB1cGxvYWQuXCIsXHJcbiAgICAgICAgdXBsb2FkTXVsdGlwbGU6IHRydWUsXHJcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFZhcmlhdGlvbnMgcmVwZWF0ZXJcclxuICAgICQoJy52YXJpYXRpb25zLXJlcGVhdGVyJykucmVwZWF0ZXIoe1xyXG4gICAgICAgIHJlcGVhdGVyczogW3tcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICcudmFyaWF0aW9uLXZhbHVlcy1yZXBlYXRlcidcclxuICAgICAgICB9XVxyXG4gICAgfSk7XHJcbn0pOyJdfQ==