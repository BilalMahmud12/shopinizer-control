Vue.component('treeselect', VueTreeselect.Treeselect)

new Vue({
    el: '#app',
    data: {
        inventory: false,
        inventory_level: 1,
        purchasability: 1,
        related_products: true,

        // treeselect dump
        treeselect_value: null,
        treeselect_options: [ {
            id: 'a',
            label: 'a',
            children: [ {
            id: 'aa',
            label: 'aa',
            }, {
            id: 'ab',
            label: 'ab',
            } ],
        }, {
            id: 'b',
            label: 'b',
        }, {
            id: 'c',
            label: 'c',
        } ],
    },
    components: {
        vuejsDatepicker
    },
    mounted: function() {

        // Tippy
        tippy('[data-tippy-content]', {
            placement: 'right'
        });

        // Records tables
        var mainTable = $('#records-table').DataTable({
            columnDefs: [
                {
                    "targets": 'no-sort',
                    "orderable": false,
                },
                {
                    targets: 0,
                    data: "select",
                    searchable: false,
                    orderable: false,
                    className: 'select-checkbox',
                    width: "4%"
                }
            ],
            responsive: true,
            select: {
                style: 'multi',
                selector: 'td:first-child'
            },
            order: [[ 1, 'asc' ]]
        });

        $('.select-checkbox').on('click', function() {
            $(this).find('.select-row').prop("checked", !$(this).find('.select-row').prop("checked"));
        });

        $('.select-all').click(function() {
            var all = mainTable.rows({ search: 'applied' }).count();
            var selectedRows = mainTable.rows({ selected: true, search: 'applied' }).count();

            if (selectedRows < all) {
                mainTable.rows({ search: 'applied' }).deselect();
                mainTable.rows({ search: 'applied' }).select();
                $(this).find('input').prop("checked", true);
                $('#records-table').find('.select-row').prop("checked", true);
            } else {
                mainTable.rows({ search: 'applied' }).deselect();
                $(this).find('input').prop("checked", false);
                $('#records-table').find('.select-row').prop("checked", false);
            }
        });

        // Quill editor init
        new Quill('#editor', {
            theme: 'snow'
        });

        // Select2 init
        $(".select2-df").select2({});

        Dropzone.autoDiscover = false;

        // Upload images init
        $("#upload-widget").dropzone({
            url: "/upload",
            dictDefaultMessage: "Drag & Drop images here to upload.",
            uploadMultiple: true,
            capture: true,
        });

        // Variations repeater
        $('.variations-repeater').repeater({
            repeaters: [{
                selector: '.variation-values-repeater'
            }]
        });

        // Customizations repeater
        $('.customizations-repeater').repeater({});

        // Custom Fields repeater
        $('.custom-fields-repeater').repeater({});
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlZ1ZS5jb21wb25lbnQoJ3RyZWVzZWxlY3QnLCBWdWVUcmVlc2VsZWN0LlRyZWVzZWxlY3QpXHJcblxyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI2FwcCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgaW52ZW50b3J5OiBmYWxzZSxcclxuICAgICAgICBpbnZlbnRvcnlfbGV2ZWw6IDEsXHJcbiAgICAgICAgcHVyY2hhc2FiaWxpdHk6IDEsXHJcbiAgICAgICAgcmVsYXRlZF9wcm9kdWN0czogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gdHJlZXNlbGVjdCBkdW1wXHJcbiAgICAgICAgdHJlZXNlbGVjdF92YWx1ZTogbnVsbCxcclxuICAgICAgICB0cmVlc2VsZWN0X29wdGlvbnM6IFsge1xyXG4gICAgICAgICAgICBpZDogJ2EnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2EnLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogWyB7XHJcbiAgICAgICAgICAgIGlkOiAnYWEnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2FhJyxcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJ2FiJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdhYicsXHJcbiAgICAgICAgICAgIH0gXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGlkOiAnYicsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnYicsXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJ2MnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2MnLFxyXG4gICAgICAgIH0gXSxcclxuICAgIH0sXHJcbiAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgdnVlanNEYXRlcGlja2VyXHJcbiAgICB9LFxyXG4gICAgbW91bnRlZDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIC8vIFRpcHB5XHJcbiAgICAgICAgdGlwcHkoJ1tkYXRhLXRpcHB5LWNvbnRlbnRdJywge1xyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVjb3JkcyB0YWJsZXNcclxuICAgICAgICB2YXIgbWFpblRhYmxlID0gJCgnI3JlY29yZHMtdGFibGUnKS5EYXRhVGFibGUoe1xyXG4gICAgICAgICAgICBjb2x1bW5EZWZzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0YXJnZXRzXCI6ICduby1zb3J0JyxcclxuICAgICAgICAgICAgICAgICAgICBcIm9yZGVyYWJsZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogMCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBcInNlbGVjdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0LWNoZWNrYm94JyxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI0JVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIHNlbGVjdDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdtdWx0aScsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3RkOmZpcnN0LWNoaWxkJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcmRlcjogW1sgMSwgJ2FzYycgXV1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnLnNlbGVjdC1jaGVja2JveCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5zZWxlY3Qtcm93JykucHJvcChcImNoZWNrZWRcIiwgISQodGhpcykuZmluZCgnLnNlbGVjdC1yb3cnKS5wcm9wKFwiY2hlY2tlZFwiKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJy5zZWxlY3QtYWxsJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBhbGwgPSBtYWluVGFibGUucm93cyh7IHNlYXJjaDogJ2FwcGxpZWQnIH0pLmNvdW50KCk7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJvd3MgPSBtYWluVGFibGUucm93cyh7IHNlbGVjdGVkOiB0cnVlLCBzZWFyY2g6ICdhcHBsaWVkJyB9KS5jb3VudCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkUm93cyA8IGFsbCkge1xyXG4gICAgICAgICAgICAgICAgbWFpblRhYmxlLnJvd3MoeyBzZWFyY2g6ICdhcHBsaWVkJyB9KS5kZXNlbGVjdCgpO1xyXG4gICAgICAgICAgICAgICAgbWFpblRhYmxlLnJvd3MoeyBzZWFyY2g6ICdhcHBsaWVkJyB9KS5zZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnaW5wdXQnKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICQoJyNyZWNvcmRzLXRhYmxlJykuZmluZCgnLnNlbGVjdC1yb3cnKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1haW5UYWJsZS5yb3dzKHsgc2VhcmNoOiAnYXBwbGllZCcgfSkuZGVzZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnaW5wdXQnKS5wcm9wKFwiY2hlY2tlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAkKCcjcmVjb3Jkcy10YWJsZScpLmZpbmQoJy5zZWxlY3Qtcm93JykucHJvcChcImNoZWNrZWRcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFF1aWxsIGVkaXRvciBpbml0XHJcbiAgICAgICAgbmV3IFF1aWxsKCcjZWRpdG9yJywge1xyXG4gICAgICAgICAgICB0aGVtZTogJ3Nub3cnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNlbGVjdDIgaW5pdFxyXG4gICAgICAgICQoXCIuc2VsZWN0Mi1kZlwiKS5zZWxlY3QyKHt9KTtcclxuXHJcbiAgICAgICAgRHJvcHpvbmUuYXV0b0Rpc2NvdmVyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIFVwbG9hZCBpbWFnZXMgaW5pdFxyXG4gICAgICAgICQoXCIjdXBsb2FkLXdpZGdldFwiKS5kcm9wem9uZSh7XHJcbiAgICAgICAgICAgIHVybDogXCIvdXBsb2FkXCIsXHJcbiAgICAgICAgICAgIGRpY3REZWZhdWx0TWVzc2FnZTogXCJEcmFnICYgRHJvcCBpbWFnZXMgaGVyZSB0byB1cGxvYWQuXCIsXHJcbiAgICAgICAgICAgIHVwbG9hZE11bHRpcGxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBWYXJpYXRpb25zIHJlcGVhdGVyXHJcbiAgICAgICAgJCgnLnZhcmlhdGlvbnMtcmVwZWF0ZXInKS5yZXBlYXRlcih7XHJcbiAgICAgICAgICAgIHJlcGVhdGVyczogW3tcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnLnZhcmlhdGlvbi12YWx1ZXMtcmVwZWF0ZXInXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEN1c3RvbWl6YXRpb25zIHJlcGVhdGVyXHJcbiAgICAgICAgJCgnLmN1c3RvbWl6YXRpb25zLXJlcGVhdGVyJykucmVwZWF0ZXIoe30pO1xyXG5cclxuICAgICAgICAvLyBDdXN0b20gRmllbGRzIHJlcGVhdGVyXHJcbiAgICAgICAgJCgnLmN1c3RvbS1maWVsZHMtcmVwZWF0ZXInKS5yZXBlYXRlcih7fSk7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=
