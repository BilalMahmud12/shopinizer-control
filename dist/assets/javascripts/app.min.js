Vue.component('treeselect', VueTreeselect.Treeselect)

new Vue({
    el: '#app',
    data: {
        // treeselect dump
        treeselect_value: null,
        treeselect_options: [ {
            id: 'a',
            label: 'a',
            children: [ {
            id: 'aa',
            label: 'aa',
            }, {
            id: 'ab',
            label: 'ab',
            } ],
        }, {
            id: 'b',
            label: 'b',
        }, {
            id: 'c',
            label: 'c',
        } ],
    },
});

Dropzone.autoDiscover = false;

$(document).ready(function() {
    // Tippy
    tippy('[data-tippy-content]', {
        placement: 'right'
    });

    // Records tables
    var mainTable = $('#records-table').DataTable({
        columnDefs: [
            {
                "targets": 'no-sort',
                "orderable": false,
            },
            {
                targets: 0,
                data: "select",
                searchable: false,
                orderable: false,
                className: 'select-checkbox',
                width: "4%"
            }
        ],
        responsive: true,
        select: {
            style: 'multi',
            selector: 'td:first-child'
        },
        order: [[ 1, 'asc' ]]
    });

    $('.select-checkbox').on('click', function() {
        $(this).find('.select-row').prop("checked", !$(this).find('.select-row').prop("checked"));
    });

    $('.select-all').click(function() {
        var all = mainTable.rows({ search: 'applied' }).count();
        var selectedRows = mainTable.rows({ selected: true, search: 'applied' }).count();

        if (selectedRows < all) {
            mainTable.rows({ search: 'applied' }).deselect();
            mainTable.rows({ search: 'applied' }).select();
            $(this).find('input').prop("checked", true);
            $('#records-table').find('.select-row').prop("checked", true);
        } else {
            mainTable.rows({ search: 'applied' }).deselect();
            $(this).find('input').prop("checked", false);
            $('#records-table').find('.select-row').prop("checked", false);
        }
    });

    // Quill editor
    new Quill('#editor', {
        theme: 'snow'
    });

    // Upload images
    $("#upload-widget").dropzone({
        url: "/upload",
        dictDefaultMessage: "Drag & Drop images here to upload.",
        uploadMultiple: true,
        capture: true,
    });
 });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJWdWUuY29tcG9uZW50KCd0cmVlc2VsZWN0JywgVnVlVHJlZXNlbGVjdC5UcmVlc2VsZWN0KVxyXG5cclxubmV3IFZ1ZSh7XHJcbiAgICBlbDogJyNhcHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIC8vIHRyZWVzZWxlY3QgZHVtcFxyXG4gICAgICAgIHRyZWVzZWxlY3RfdmFsdWU6IG51bGwsXHJcbiAgICAgICAgdHJlZXNlbGVjdF9vcHRpb25zOiBbIHtcclxuICAgICAgICAgICAgaWQ6ICdhJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdhJyxcclxuICAgICAgICAgICAgY2hpbGRyZW46IFsge1xyXG4gICAgICAgICAgICBpZDogJ2FhJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdhYScsXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgaWQ6ICdhYicsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnYWInLFxyXG4gICAgICAgICAgICB9IF0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJ2InLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2InLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgaWQ6ICdjJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdjJyxcclxuICAgICAgICB9IF0sXHJcbiAgICB9LFxyXG59KTtcclxuXHJcbkRyb3B6b25lLmF1dG9EaXNjb3ZlciA9IGZhbHNlO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBUaXBweVxyXG4gICAgdGlwcHkoJ1tkYXRhLXRpcHB5LWNvbnRlbnRdJywge1xyXG4gICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0J1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVjb3JkcyB0YWJsZXNcclxuICAgIHZhciBtYWluVGFibGUgPSAkKCcjcmVjb3Jkcy10YWJsZScpLkRhdGFUYWJsZSh7XHJcbiAgICAgICAgY29sdW1uRGVmczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInRhcmdldHNcIjogJ25vLXNvcnQnLFxyXG4gICAgICAgICAgICAgICAgXCJvcmRlcmFibGVcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldHM6IDAsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBcInNlbGVjdFwiLFxyXG4gICAgICAgICAgICAgICAgc2VhcmNoYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0LWNoZWNrYm94JyxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjQlXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuICAgICAgICBzZWxlY3Q6IHtcclxuICAgICAgICAgICAgc3R5bGU6ICdtdWx0aScsXHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAndGQ6Zmlyc3QtY2hpbGQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcmRlcjogW1sgMSwgJ2FzYycgXV1cclxuICAgIH0pO1xyXG5cclxuICAgICQoJy5zZWxlY3QtY2hlY2tib3gnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLmZpbmQoJy5zZWxlY3Qtcm93JykucHJvcChcImNoZWNrZWRcIiwgISQodGhpcykuZmluZCgnLnNlbGVjdC1yb3cnKS5wcm9wKFwiY2hlY2tlZFwiKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcuc2VsZWN0LWFsbCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhbGwgPSBtYWluVGFibGUucm93cyh7IHNlYXJjaDogJ2FwcGxpZWQnIH0pLmNvdW50KCk7XHJcbiAgICAgICAgdmFyIHNlbGVjdGVkUm93cyA9IG1haW5UYWJsZS5yb3dzKHsgc2VsZWN0ZWQ6IHRydWUsIHNlYXJjaDogJ2FwcGxpZWQnIH0pLmNvdW50KCk7XHJcblxyXG4gICAgICAgIGlmIChzZWxlY3RlZFJvd3MgPCBhbGwpIHtcclxuICAgICAgICAgICAgbWFpblRhYmxlLnJvd3MoeyBzZWFyY2g6ICdhcHBsaWVkJyB9KS5kZXNlbGVjdCgpO1xyXG4gICAgICAgICAgICBtYWluVGFibGUucm93cyh7IHNlYXJjaDogJ2FwcGxpZWQnIH0pLnNlbGVjdCgpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2lucHV0JykucHJvcChcImNoZWNrZWRcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICQoJyNyZWNvcmRzLXRhYmxlJykuZmluZCgnLnNlbGVjdC1yb3cnKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtYWluVGFibGUucm93cyh7IHNlYXJjaDogJ2FwcGxpZWQnIH0pLmRlc2VsZWN0KCk7XHJcbiAgICAgICAgICAgICQodGhpcykuZmluZCgnaW5wdXQnKS5wcm9wKFwiY2hlY2tlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICQoJyNyZWNvcmRzLXRhYmxlJykuZmluZCgnLnNlbGVjdC1yb3cnKS5wcm9wKFwiY2hlY2tlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUXVpbGwgZWRpdG9yXHJcbiAgICBuZXcgUXVpbGwoJyNlZGl0b3InLCB7XHJcbiAgICAgICAgdGhlbWU6ICdzbm93J1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVXBsb2FkIGltYWdlc1xyXG4gICAgJChcIiN1cGxvYWQtd2lkZ2V0XCIpLmRyb3B6b25lKHtcclxuICAgICAgICB1cmw6IFwiL3VwbG9hZFwiLFxyXG4gICAgICAgIGRpY3REZWZhdWx0TWVzc2FnZTogXCJEcmFnICYgRHJvcCBpbWFnZXMgaGVyZSB0byB1cGxvYWQuXCIsXHJcbiAgICAgICAgdXBsb2FkTXVsdGlwbGU6IHRydWUsXHJcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcclxuICAgIH0pO1xyXG4gfSk7Il19